<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://vallek.github.io/webval-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://vallek.github.io/webval-blog/" rel="alternate" type="text/html" /><updated>2024-01-18T18:36:09+03:00</updated><id>https://vallek.github.io/webval-blog/feed.xml</id><title type="html">Борьба с дизайном</title><subtitle>Конструктивная критика дизайн-решений</subtitle><entry><title type="html">Почему я не использую CSS nesting и вам не советую</title><link href="https://vallek.github.io/webval-blog/2023/02/22/css-nesting.html" rel="alternate" type="text/html" title="Почему я не использую CSS nesting и вам не советую" /><published>2023-02-22T00:00:00+03:00</published><updated>2023-02-22T00:00:00+03:00</updated><id>https://vallek.github.io/webval-blog/2023/02/22/css-nesting</id><content type="html" xml:base="https://vallek.github.io/webval-blog/2023/02/22/css-nesting.html">&lt;p&gt;В Хроме и бете Сафари (на момент написания) &lt;a href=&quot;https://caniuse.com/css-nesting&quot;&gt;появился&lt;/a&gt; нативный CSS nesting, то есть возможность вкладывать одни css правила в другие, подобно тому, как это позволяют делать препроцессоры вроде SCSS. О том, почему я не большой поклонник этой фичи читайте далее:)&lt;/p&gt;

&lt;p&gt;CSS нестинг противоречит практике разделения разметки/структуры HTML и стилизации CSS, что в свою очередь увеличивает связанность кода, делает код менее читаемым и решает задачи, которые уже решают другие подходы без вышеперечисленных проблем. Давайте разберем каждый пункт.&lt;/p&gt;

&lt;h2 id=&quot;связанность&quot;&gt;Связанность&lt;/h2&gt;
&lt;p&gt;Про связанность кода часто говорят в контексте внутри самого CSS, когда речь идет об использовании слишком общих селекторов по элементам и вложенности селекторов. Например, селектор &lt;code class=&quot;highlighter-rouge&quot;&gt;.some-list a&lt;/code&gt; может выглядеть безобидно сегодня, но завтра окажется, что в каждом пункте меню не один тип ссылок, а несколько.&lt;/p&gt;

&lt;p&gt;Примерно та же проблема возникает, когда мы тянем структуру страницы из HTML в CSS. Посмотрим на &lt;a href=&quot;https://webkit.org/blog/13813/try-css-nesting-today-in-safari-technology-preview/&quot;&gt;пример&lt;/a&gt; от создателей &lt;del&gt;нового Internet Explorer&lt;/del&gt; Safari:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/css-nesting-1.png&quot; alt=&quot;скриншот кода&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Предполагается, что у нас есть некий компонент со списком внутри. Мы хотим задать внутренний отступ всем спискам и убрать отступ по умолчанию у списка внутри компонента.&lt;/p&gt;

&lt;p&gt;Я вижу несколько проблем предлагаемого решения:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;У списка компонента нет класса. Это может привести к проблемам в будущем. Если что-то поменяется в структуре (в компоненте появится другой список) придется переписывать правило. Но если бы у этих списков был свой класс вся эта конструкция была бы не нужна в принципе (заглянувшие в теги могут догадаться, к чему я веду:)&lt;/li&gt;
  &lt;li&gt;Собственно, абсолютно все примеры улучшения css нестингом, которые я видел, состоят из совершенно кошмарного изначально кода, вроде такого:&lt;br /&gt;
&lt;img src=&quot;/webval-blog/Images/css-nesting-4.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
Да, это не совсем проблема нестинга, но если это единственное, что можно им улучшить, то возможно стоит сначала взяться за изначальные проблемы.&lt;/li&gt;
  &lt;li&gt;Из этого css непонятно, можно ли будет использовать этот список вне компонента. Если да, то опять же это создаст дополнительную работу.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;читаемость&quot;&gt;Читаемость&lt;/h2&gt;

&lt;p&gt;При использовании нестинга (с любой реализацией), страдает читаемость кода. В обычном CSS правиле есть только два уровня индентации. Верхний с селектором и внутренний со свойствами. Это позволяет максимально быстро пробежать глазами по коду, легко считать и найти нужное. А что с нестингом?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;С нестингом вы не знаете заранее, что именно будет стоять на внутреннем отступе: свойство или селектор. Мозгу сложнее отделять строки. Конечно, это отчасти решается подсветкой синтаксиса, но сокращает способы считываемости.&lt;/li&gt;
  &lt;li&gt;Кроме того вложенность может обозначаться в любую сторону (как в первом примере). Что еще больше увеличивает нагрузку на мозг.&lt;/li&gt;
  &lt;li&gt;А еще можно вкладывать многоуровневые медиа-запросы. Посмотрите на этот ужас из спецификации:&lt;br /&gt;
&lt;img src=&quot;/webval-blog/Images/css-nesting-2.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
Представьте, что вам нужно убрать правило для ориентации экрана, но оставить для ширины. Где это сделать будет быстрее?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;В целом я не вижу причин не следовать и здесь золотому правилу “не усложняйте без необходимости”)&lt;/p&gt;

&lt;h2 id=&quot;решение&quot;&gt;Решение&lt;/h2&gt;

&lt;p&gt;Решение всех этих и многих других проблем уже давно известно и многими в разной форме используется. Это методологии именования классов. Одна из них - БЭМ, которую я использую и могу посоветовать вам. Впрочем, какую именно методологию использовать не так важно, как принципы, на которые они обычно опираются.&lt;/p&gt;

&lt;p&gt;Один из таких принципов - давать уникальные классы всем уникальным сущностям. Я не буду здесь углубляться в то, как именно это делается по БЭМу вы можете почитать про это сами &lt;a href=&quot;https://vallek.github.io/web-links/index.html#bem&quot;&gt;по ссылкам в моей подборке&lt;/a&gt; или даже попасть на &lt;a href=&quot;https://vallek.github.io/pages/projects/bem.html&quot;&gt;мою лекцию&lt;/a&gt;, если она проводится.&lt;/p&gt;

&lt;p&gt;Но пока просто предлагаю сравнить два примера:&lt;/p&gt;

&lt;pre&gt;
	ul {
	  padding-left: 1em;
	  .component &amp;amp; {
	    padding-left: 0;
	  }
	}
&lt;/pre&gt;

&lt;pre&gt;
	ul {
		padding-left: 1em;
	}
	.component__list {
		padding-left: 0;
	}
&lt;/pre&gt;

&lt;p&gt;Какой из них проще понять? Какой будет проще переиспользовать и какой вызовет меньше проблем в будущем?&lt;/p&gt;

&lt;p&gt;Методология решает все вышеперечисленные проблемы. Специфичность и каскад не вызовут проблем, если использовать уникальные селекторы без вложенности. Подробнее о решении этих проблем по БЭМу можно &lt;a href=&quot;https://ru.bem.info/methodology/solved-problems/&quot;&gt;почитать в доках&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Тут стоит отметить, что хотя БЭМ допускает применение каскада, но использовать его без крайней необходимости не рекомендуется. Нестинг же по сути построен на предположении, что каскад через вложенные селекторы используется регулярно.&lt;/p&gt;

&lt;p&gt;“А как же правило для всех списков?” - спросите вы - “это ведь не по БЭМу”. Да, таких общих стилей лучше избегать. Но, если речь идет об одном селекторе по тегу, то правила с классом его перепишут, так что это не самое страшное, что можно сделать. В целом же БЭМ это не высеченные в граните заповеди, а принципы. Они могут принести пользу, но только, если перед их использованием подумать, что и зачем вы делаете.&lt;/p&gt;

&lt;p&gt;Но главное отличие этих подходов с моей точки зрения можно выразить так: нестинг тащит структуру в стили, методология же следует задачам. Поэтому с БЭМом, как ни странно, проще понять, о какой структуре идет речь, не заглядывая в html. Ведь классы описывают ее семантически.&lt;/p&gt;

&lt;p&gt;Конечно, нет смысла использовать БЭМ, не думая заранее, что и где нужно будет переиспользовать. И, да, задачи могут поменяться. Но рефакторить элементы в блоки по-моему полегче, чем пытаться переиспользовать вот это чудо:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/css-nesting-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На всякий случай добавлю, что все вышесказанное относится к любому нестингу, не только нативному, но и из препроцессоров. Просто с распространением натива, наверняка еще больше разработчиков станет все это использовать. И возможно есть задачи, в которых нестинг может чем-то помочь, как и любая другая технология. Я всего-лишь хочу предостеречь от бездумного хватания за этот синтаксис по умолчанию. Вот и весь хот тейк, а кто скушал молодец)&lt;/p&gt;</content><author><name></name></author><category term="веб" /><category term="css" /><category term="nesting" /><category term="бэм" /><summary type="html">В Хроме и бете Сафари (на момент написания) появился нативный CSS nesting, то есть возможность вкладывать одни css правила в другие, подобно тому, как это позволяют делать препроцессоры вроде SCSS. О том, почему я не большой поклонник этой фичи читайте далее:)</summary></entry><entry><title type="html">Как исправить ошибку валидатора для инлайновой svg фавиконки с эмоджи</title><link href="https://vallek.github.io/webval-blog/2022/06/02/fix-svg-favicon-error.html" rel="alternate" type="text/html" title="Как исправить ошибку валидатора для инлайновой svg фавиконки с эмоджи" /><published>2022-06-02T00:00:00+03:00</published><updated>2022-06-02T00:00:00+03:00</updated><id>https://vallek.github.io/webval-blog/2022/06/02/fix-svg-favicon-error</id><content type="html" xml:base="https://vallek.github.io/webval-blog/2022/06/02/fix-svg-favicon-error.html">&lt;p&gt;В своей &lt;a href=&quot;https://vallek.github.io/web-links/index.html&quot;&gt;подборке материалов&lt;/a&gt; для фронтендеров я изначально использовал инлайновый подход для разных ресурсов, например стилей. Просто, чтобы было проще поделиться всем одним файлом. И хотя с тех пор дизайн и структура проекта усложнились, подход я пока не поменял. К фавиконке я подошел таким же образом. А именно заинлайнил ее прямо в элемент link)&lt;/p&gt;

&lt;p&gt;Тут сразу хочется отметить, особенно для новичков, что это не лучшая практика. Такие вещи лучше подключать отдельно. Кроме того для оптимального отображения на разных устройствах лучше использовать разные форматы и размеры. Подробнее об истории вопроса можно почитать в &lt;a href=&quot;https://htmlacademy.ru/blog/articles/short-18&quot;&gt;статье&lt;/a&gt; от HTML Академии.&lt;/p&gt;

&lt;p&gt;Так или иначе я себе поставил такую задачу. И решение нашлось довольно быстро - это так называемые &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs&quot;&gt;data url&lt;/a&gt;. Вы можете поставить в начале значения аттрибута href приставку data: с нужным типом данных и вставить эти самые данные прямо вместо ссылки. В моем случае это выглядело так:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;link rel=&quot;icon&quot; href=&quot;data:image/svg+xml,&amp;lt;svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22&amp;gt;&amp;lt;text y=%22.9em%22 font-size=%2290%22&amp;gt;✊&amp;lt;/text&amp;gt;&amp;lt;/svg&amp;gt;&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;И это работает! Но, есть одна проблема. Валидатор ругается на недопустимые символы для значения href. В данном случае его можно игнорировать (только если вы на 200% уверены, что именно вы игнорируете), но мне хотелось, чтобы на странице для студентов не было красных ошибок валидации))
&lt;img src=&quot;/webval-blog/Images/fav-1.png&quot; alt=&quot;скриншот валидатора с ошибкой&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Первое, что пришло в голову: просто заменить символы на “спецсимволы”, то есть код, который как раз придуман, чтобы избежать использования недопустимых символов в коде. Такие символы есть в разных вариантах для html, css и т.д. К сожалению валидатор продолжал оценивать результат декодирования и выдавал те же ошибки.&lt;/p&gt;

&lt;p&gt;Но, как я не устаю повторять студентам, никогда не стоит останавливаться на первом, самом очевидном, ответе! Поэтому я продолжил копать. А именно погуглил несколько слов из кода и ошибки.
&lt;img src=&quot;/webval-blog/Images/fav-3.png&quot; alt=&quot;скриншот гугл запроса&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Среди результатов первой страницы я наткнулся на похожий вопрос на форуме drupal (это такая CMS на php). И там в похожей строчке я увидел странный спецсимвол.
&lt;img src=&quot;/webval-blog/Images/fav-4.png&quot; alt=&quot;скриншот форума с вопросом&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Это оказалась кодировака url или &lt;a href=&quot;https://en.wikipedia.org/wiki/Percent-encoding&quot;&gt;Percent-encoding&lt;/a&gt;. И мало того, что она декодируется браузерами, ее валидатор уже пропускает. Чтобы ее использовать вам не нужен php. Можно заменить символы вручную. Но проще, конечно, найти &lt;a href=&quot;https://www.urlencoder.org/&quot;&gt;онлайн инструмент&lt;/a&gt;, что я и сделал. И вуаля, инлайновая svg фавиконка с эмоджи, на на которую не ругается валидатор:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;link rel=&quot;icon&quot; href=&quot;data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20100%20100%22%20%3E%3Ctext%20y=%22.9em%22%20font-size=%2290%22%20%3E✊%3C/text%20%3E%3C/svg%20%3E&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/fav-2.png&quot; alt=&quot;скриншот валидатора без ошибки&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;upd!&lt;/strong&gt; Кто-то запилил &lt;a href=&quot;https://fav.farm/&quot;&gt;онлайн инструмент&lt;/a&gt; с короткой ссылкой для link, у которой нет этой проблемы.&lt;/p&gt;</content><author><name></name></author><category term="веб" /><category term="html" /><category term="svg" /><category term="validator" /><category term="errors" /><category term="encoding" /><category term="favicon" /><summary type="html">В своей подборке материалов для фронтендеров я изначально использовал инлайновый подход для разных ресурсов, например стилей. Просто, чтобы было проще поделиться всем одним файлом. И хотя с тех пор дизайн и структура проекта усложнились, подход я пока не поменял. К фавиконке я подошел таким же образом. А именно заинлайнил ее прямо в элемент link)</summary></entry><entry><title type="html">Проблема с системной настройкой reduced motion</title><link href="https://vallek.github.io/webval-blog/2021/06/14/reduce-motion-problem.html" rel="alternate" type="text/html" title="Проблема с системной настройкой reduced motion" /><published>2021-06-14T00:00:00+03:00</published><updated>2021-06-14T00:00:00+03:00</updated><id>https://vallek.github.io/webval-blog/2021/06/14/reduce-motion-problem</id><content type="html" xml:base="https://vallek.github.io/webval-blog/2021/06/14/reduce-motion-problem.html">&lt;p&gt;С недавних пор верстальщики могут учитывать системную настройку пользователей уменьшения движений (reduced motion) при использовании css анимаций. Эта настройка говорит сайтам, что юзер предпочитает отсутствие лишних движений на экране. Прежде всего речь идет об анимациях.&lt;/p&gt;

&lt;p&gt;Вообще эта настройка помогает доступности. Есть люди, которым физически плохо от мельтешения на экране. Они отключают анимации в операционной системе, а авторы сайтов с помощью спец. правила &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion&quot;&gt;prefers-reduced-motion&lt;/a&gt; могут отключить все анимации таким юзерам.&lt;/p&gt;

&lt;p&gt;И это замечательно, но есть одна проблема.&lt;/p&gt;

&lt;p&gt;Дело в том, что есть другие причины, по которым юзеры используют эту настройку. Самая очевидная - кому-то просто не нравятся анимации в системе. Я один из таких пользователей. Меня раздражают анимации Windows, многие из которых только мешают и замедляют рабочий процесс. Тоже касается и анимаций интерфейса программ. Например браузеров.&lt;/p&gt;

&lt;p&gt;Но это вовсе не значит, что я не хочу видеть анимации на сайтах. Не говоря уже о том, что мне как верстальщику, код-ревьюеру и преподавателю просто необходимо их видеть. И вот тут-то и начинаются проблемы. Потому что нельзя просто так взять и отключить только системные анимации. Я не могу сказать “выключи анимации ОС, но продолжай показывать анимации в браузере.” Можно отключить большую часть анимации интерфейса браузера. Но только малую часть анимаций в Windows 10, не включая reduced motion.&lt;/p&gt;

&lt;p&gt;Вы можете указать браузерам, чтобы они игнорировали настройку. Например в Firefox за это отвечает ключ ui.prefersReducedMotion в about:config. Но это не даст желаемого результата при отключенной опции в системе.&lt;/p&gt;

&lt;p&gt;Это конечно вина не авторов спецификации CSS и браузеров, а недосмотр дизайнеров Windows 10. Я &lt;a href=&quot;https://www.tpgi.com/short-note-on-prefers-reduced-motion-and-puzzled-windows-users/&quot;&gt;не первый, кто обратил внимание&lt;/a&gt; на эту проблему. Но идеального решения на момент описания я не знаю.&lt;/p&gt;</content><author><name></name></author><category term="веб" /><category term="css" /><category term="анимация" /><category term="доступность" /><category term="windows" /><summary type="html">С недавних пор верстальщики могут учитывать системную настройку пользователей уменьшения движений (reduced motion) при использовании css анимаций. Эта настройка говорит сайтам, что юзер предпочитает отсутствие лишних движений на экране. Прежде всего речь идет об анимациях.</summary></entry><entry><title type="html">Предсказуемый интерфейс - хороший интерфейс</title><link href="https://vallek.github.io/webval-blog/2021/03/28/predict-ui.html" rel="alternate" type="text/html" title="Предсказуемый интерфейс - хороший интерфейс" /><published>2021-03-28T00:00:00+03:00</published><updated>2021-03-28T00:00:00+03:00</updated><id>https://vallek.github.io/webval-blog/2021/03/28/predict-ui</id><content type="html" xml:base="https://vallek.github.io/webval-blog/2021/03/28/predict-ui.html">&lt;p&gt;Одна из частых ошибок в веб-дизайне - непредсказуемость интерфейса. Этим страдают не только новички, но и продукты очень больших компаний.&lt;/p&gt;

&lt;p&gt;Пример:&lt;/p&gt;

&lt;p&gt;Форма нового письма gmail. При нажатии на поле “куда” оно внезапно прыгает вниз, а на его месте оказывается поле “от кого”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/pred-ui-1.gif&quot; alt=&quot;гифка с демонстрацией&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Чем плоха непредсказуемость?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Вероятность ошибочного действия. Пользователь может нажать не туда. В некоторых случаях это может привести к довольно серьезным последствиям (отправил не то не туда, потерял данные).&lt;/li&gt;
  &lt;li&gt;Потеря времени. Юзеру приходится перестраиваться под интерфейс на ходу.&lt;/li&gt;
  &lt;li&gt;Раздражение. Сложно представить себе пользователя, которому нравится гоняться за скачущими кнопками.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Нет причин не делать интерфейс предсказуемым. Предсказуемый интерфейс - качественный интерфейс!&lt;/p&gt;</content><author><name></name></author><category term="ui" /><category term="дизайн" /><summary type="html">Одна из частых ошибок в веб-дизайне - непредсказуемость интерфейса. Этим страдают не только новички, но и продукты очень больших компаний.</summary></entry><entry><title type="html">Layout по-русски</title><link href="https://vallek.github.io/webval-blog/2020/05/07/layout-translation.html" rel="alternate" type="text/html" title="Layout по-русски" /><published>2020-05-07T00:00:00+03:00</published><updated>2020-05-07T00:00:00+03:00</updated><id>https://vallek.github.io/webval-blog/2020/05/07/layout-translation</id><content type="html" xml:base="https://vallek.github.io/webval-blog/2020/05/07/layout-translation.html">&lt;p&gt;Термин layout из верстки переводится как “раскладка”. По крайней мере его стоит так переводить. В сфере фронтендеров иногда принято переводить его, как “сетки”. Но это неграмотно и даже вредно по двум причинам:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Слово layout появилось вовсе не во времена веба, а гораздо раньше. И в контексте веб-верстки оно означает то же самое, что и в традиционной верстке. А именно расположение элементов дизайна на странице. Как и у любых английских слов, у этого есть несколько вариантов перевода, но “сеток” среди них точно нет. Чтобы в этом убедиться достаточно открыть любой словарь.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Но гораздо более важна вторая причина. Недопонимание - одна из главных проблем любого рабочего процесса. А если у термина больше одного значения, то шанс недопонимания возрастает. А у термина “сетки” в верстке уже есть значение. Это перевод слова grid (при этом многие просто называют это гридами, да). То есть одного из типов раскладки. Кроме того есть “дизайнерские сетки”, те которые верстальщики видят в макетах.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Спрашивается, зачем множить сущности, когда у нас уже есть нормальный перевод слова?&lt;/p&gt;</content><author><name></name></author><category term="layout" /><category term="css" /><category term="перевод" /><category term="язык" /><summary type="html">Термин layout из верстки переводится как “раскладка”. По крайней мере его стоит так переводить. В сфере фронтендеров иногда принято переводить его, как “сетки”. Но это неграмотно и даже вредно по двум причинам:</summary></entry><entry><title type="html">Проблема терминов БЭМа</title><link href="https://vallek.github.io/webval-blog/2019/07/19/bem-terms-problem.html" rel="alternate" type="text/html" title="Проблема терминов БЭМа" /><published>2019-07-19T00:00:00+03:00</published><updated>2019-07-19T00:00:00+03:00</updated><id>https://vallek.github.io/webval-blog/2019/07/19/bem-terms-problem</id><content type="html" xml:base="https://vallek.github.io/webval-blog/2019/07/19/bem-terms-problem.html">&lt;p&gt;В вебе (и не только) есть проблема с терминами. Она вытекает из часто формирующихся в профессиональных средах “птичьих языков”. И вот конкретный пример. Я не знаю, кто придумывал главные термины БЭМа, но этот человек явно не остановился, чтобы спросить себя, а стоит ли использовать именно эти слова.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ru.bem.info/methodology/quick-start/&quot;&gt;БЭМ&lt;/a&gt; — это методология, система организации процесса создания сайтов. Помимо прочего HTML и CSS кода. Основа этой системы — три термина, которые образуют аббревиатуру БЭМ. Блок, элемент и модификатор.&lt;/p&gt;

&lt;p&gt;Проблема в том, что у двух из трех этих слов уже есть другие официальные и не очень значения. Блоком что только ни называют. И основные секции страницы и блочные боксы и вообще, кажется, любую часть страницы. Элемент — собственно то из чего состоит HTML. Но кроме этого этим словом часто называют узел DOM и уже отрисованное содержимое на странице. Более того иногда этими словами могут называть одно и то же! И только слово модификатор не имеет (вроде бы) других значений в этой сфере.&lt;/p&gt;

&lt;p&gt;Вот и получается, что если кто-то спрашивает про “этот элемент” применительно к верстке по БЭМу остается только чесать голову. Хорошо, если чешущий догадается уточнить, что имелось в виду. Но как мы знаем, многие думают, что “я тебя услышал” равно “я тебя понял”, а значит ошибки неминуемы.&lt;/p&gt;

&lt;p&gt;Конечно невозможно знать, сколько проблем создает или не создает такое недопонимание. Но лично я уже сталкивался с необходимостью уточнять, что я или кто-то еще имеют в виду. Особенно это актуально при обучении. Как можно ожидать, что люди овладеют материалом, если под каждым словом может подразумеваться, что угодно? Кто-то может сказать “просто нужно уточнять” или “из контекста будет понятно”. Но я не считаю, что увеличение вероятности недопонимания — это нормально. Я считаю, что это проблема, которую нужно решать.&lt;/p&gt;

&lt;p&gt;Я, конечно, не предлагаю изменять терминологию БЭМ:) Понятно, что уже поздно это делать. Но учитывая, что в день появляется примерно 10 новых библиотек и фреймворков (не говоря уже о новых инструментах и материалов про них) я надеюсь, что может хотя бы кто-то задумается, прежде чем брать названия терминов, которые в этой сфере уже заняты.&lt;/p&gt;</content><author><name></name></author><category term="веб" /><category term="бэм" /><category term="язык" /><summary type="html">В вебе (и не только) есть проблема с терминами. Она вытекает из часто формирующихся в профессиональных средах “птичьих языков”. И вот конкретный пример. Я не знаю, кто придумывал главные термины БЭМа, но этот человек явно не остановился, чтобы спросить себя, а стоит ли использовать именно эти слова.</summary></entry><entry><title type="html">Иконки должны быть цветными</title><link href="https://vallek.github.io/webval-blog/2019/01/08/color-icons.html" rel="alternate" type="text/html" title="Иконки должны быть цветными" /><published>2019-01-08T00:00:00+03:00</published><updated>2019-01-08T00:00:00+03:00</updated><id>https://vallek.github.io/webval-blog/2019/01/08/color-icons</id><content type="html" xml:base="https://vallek.github.io/webval-blog/2019/01/08/color-icons.html">&lt;p&gt;Цвет - важная часть любого интерфейса, особенно того, где элементы маленькие, их много и они плотно прижаты друг к другу. Дизайнеру интерфейсов с иконками стоит пользоваться любой возможностью ускорить считываемость. К сожалению, многими современными дизайнерами цвет в оформлении иконок игнорируется. Виной тому, как это часто бывает, - мода.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/Screenshot_2019-01-08SearchUI_Bar.png&quot; alt=&quot;Иконки в системном трее&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Иконки встроенных программ в системном трее Windows 10 стали черно-белыми. К счастью сторонним приложениям не запрещено быть цветными. И посмотрите, насколько легче считываются цветные иконки.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/img_580ab50544559.png&quot; alt=&quot;Цветные иконки&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Фон не менее важен, чем сами иконки. В Windows XP была противоположная проблема - цвет нижней панели был слишком ярким и на его фоне терялись значки.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/145572.png&quot; alt=&quot;Трей в XP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Кнопки инструментов в фотошопе почти неразличимы, если в них не всматриваться.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/hn45324r2fsrg.png&quot; alt=&quot;Инструменты фотошопа&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Сравните с аналогичными кнопками в Adobe Elements.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/4558745855_f8184e566f_o2.jpg&quot; alt=&quot;Инструменты Элементов&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Конечно, в фотошопе гораздо эффективнее и удобнее переключать инструменты горячими клавишами, но это не делает интерфейс лучше.&lt;/p&gt;

&lt;p&gt;Тут важно сказать, что цвет не является первой по важности информацией в том, как мы визуально воспринимаем окружающий мир. Но, из этого совершенно не следует, что его нужно игнорировать!&lt;/p&gt;

&lt;p&gt;Но одного цвета мало. Иконки похожего цвета и формы придется разглядывать более пристально, чтобы не ошибиться.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/2f2ff791-6025-44bd-a612-d35dda9648f3.jpg&quot; alt=&quot;Иконки похожего цвета&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Поэтому при дизайне интерфейса с иконками важно думать и о форме (контрастная часть изображения), и о цвете. Если заранее неизвестно, с чем могут соседствовать встроенные иконки (приложения), стоит уменьшить вероятность путаницы. Для этого нужно сделать иконку непохожей на самые популярные, хотя бы по одному (а лучше двум) признакам. Если у вас логотип в форме птичке - не делайте ее синей. И самое главное: если вы делаете дизайн облачного хранилища, возможно, стоит придумать что-то другое, кроме облака.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/Screenshot_2019-01-08cloud.jpg&quot; alt=&quot;Логотипы облачных сервисов в иде облака&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="дизайн" /><category term="иконки" /><category term="цвет" /><category term="считываемость" /><summary type="html">Цвет - важная часть любого интерфейса, особенно того, где элементы маленькие, их много и они плотно прижаты друг к другу. Дизайнеру интерфейсов с иконками стоит пользоваться любой возможностью ускорить считываемость. К сожалению, многими современными дизайнерами цвет в оформлении иконок игнорируется. Виной тому, как это часто бывает, - мода.</summary></entry><entry><title type="html">Как изменить цвета подсветки синтаксиса в VS Code</title><link href="https://vallek.github.io/webval-blog/2018/08/26/vs-code-syntax-highlight.html" rel="alternate" type="text/html" title="Как изменить цвета подсветки синтаксиса в VS Code" /><published>2018-08-26T00:00:00+03:00</published><updated>2018-08-26T00:00:00+03:00</updated><id>https://vallek.github.io/webval-blog/2018/08/26/vs-code-syntax-highlight</id><content type="html" xml:base="https://vallek.github.io/webval-blog/2018/08/26/vs-code-syntax-highlight.html">&lt;p&gt;Решить, вроде бы, банальный для редактора кода вопрос из заголовка, в VS Code оказалось непросто. В Sublime Text для этого достаточно распаковать файл темы, найти нужное значение и поменять цвет. Но мне нужен был официально бесплатный для коммерческого использования редактор и из тех, что я пробовал, VS Code показался самым нормальным (еще потыкал Brackets и Atom). Но, как это обычно бывает, чем дольше чем-то пользуешься, тем больше косяков находишь. Особенно у Майкрософт, да. Тут они решили не искать простых путей (по крайней мере, для пользователя). Хотите поменять один цвет? Вам придется либо создавать тему с нуля, либо собирать по крупицам рецепт ниже. Может этот пост сэкономит кому-то время и нервы.&lt;/p&gt;

&lt;p&gt;Будем менять цвета подсветки на примере темы Solarized Dark и CSS.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Открываем настройки.&lt;/li&gt;
  &lt;li&gt;В пользовательские настройки добавляем следующую конструкцию:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-`&quot;&gt;“editor.tokenColorCustomizations”: {
    “[Solarized Dark]”: {
        “textMateRules”: [
            {
                “scope”: “entity.other.attribute-name.class.css”,
                “settings”: {
                “foreground”: “#e9a449”
                }
            },
        ],
    },
},
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;как-изменить-другую-тему-другие-параметры-и-другие-языки&quot;&gt;Как изменить другую тему, другие параметры и другие языки&lt;/h2&gt;

&lt;p&gt;Название темы в квадратных скобках просто заменяете на вашу. Вам нужно узнать значение scope для того элемента, который вы хотите изменить. Для этого откройте файл с кодом. Вызовите командную строку (Ctrl+Shift+P). Наберите “Developer: Inspect Editor Tokens and Scopes” и нажмите Enter. При клике на элемент, появится всплывающее окно:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/BrK-p8PMBERKd8NTmD04oA.png&quot; alt=&quot;скриншот-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Оно сразу предлагает строку с называнием параметра (тот самый scope) и текущим цветом — entity.other.attribute-name { “foreground”: “#93A1A1” }. Но, это не то, что нам нужно! По-крайней мере в данном случае, этот параметр изменит цвет всех селекторов (и классов, и id). Но я хочу задать для каждого свой цвет. Поэтому нам нужен первый параметр из списка ниже. То есть entity.other.attribute-name.class.css. У идентификатора будет похожая картина, только scope будет entity.other.attribute-name.id.css.&lt;/p&gt;

&lt;p&gt;А вот после применения настроек scope также поменяется на нужный:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/Gl2CS_N3358j5fO73nX9A.png&quot; alt=&quot;скриншот-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Я оставил в коде запятые на случай, если вы захотите добавить других цветов и другие параметры на уровни выше.&lt;/p&gt;</content><author><name></name></author><category term="vs_code" /><category term="css" /><category term="веб_дизайн" /><summary type="html">Решить, вроде бы, банальный для редактора кода вопрос из заголовка, в VS Code оказалось непросто. В Sublime Text для этого достаточно распаковать файл темы, найти нужное значение и поменять цвет. Но мне нужен был официально бесплатный для коммерческого использования редактор и из тех, что я пробовал, VS Code показался самым нормальным (еще потыкал Brackets и Atom). Но, как это обычно бывает, чем дольше чем-то пользуешься, тем больше косяков находишь. Особенно у Майкрософт, да. Тут они решили не искать простых путей (по крайней мере, для пользователя). Хотите поменять один цвет? Вам придется либо создавать тему с нуля, либо собирать по крупицам рецепт ниже. Может этот пост сэкономит кому-то время и нервы.</summary></entry><entry><title type="html">Разбор дизайна за 22.06.18</title><link href="https://vallek.github.io/webval-blog/2018/06/22/'razbor'.html" rel="alternate" type="text/html" title="Разбор дизайна за 22.06.18" /><published>2018-06-22T00:00:00+03:00</published><updated>2018-06-22T00:00:00+03:00</updated><id>https://vallek.github.io/webval-blog/2018/06/22/'razbor'</id><content type="html" xml:base="https://vallek.github.io/webval-blog/2018/06/22/'razbor'.html">&lt;p&gt;Сегодня у нас разбор рекламы установки контейнеров для раздельного сбора мусора во дворах. Выглядит она вот так:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/ne9WcNqKKEHe55yuDgkHTw.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Посмотрим, в чем тут проблема и как можно все исправить.&lt;/p&gt;

&lt;p&gt;Вся реклама состоит из кучи элементов, которые вывалены на поверхность без соблюдения каких-либо принципов дизайна. Смотрите, что будет, если обвести каждый блок рамкой:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/UqVeOAsW8Dfx2066_2asrQ.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Почти все блоки пересекаются друг с другом. При этом здесь нет четкого принципа расположения элементов. Они не выстроены по линиям или сетке, не расставлены по углам. Внутри блоков тоже бардак. Похоже на свалку:)&lt;/p&gt;

&lt;p&gt;Вторая проблема: реклама слишком пестрая. Слова и даже отдельные буквы раскрашены в разные цвета. Некоторые слова написаны прописными буквами. Черный фон забирает слишком много внимания. Всё это сильно затрудняет быстрое считывание информации и создает впечатление истерики и шизофрении.&lt;/p&gt;

&lt;p&gt;Третья проблема: приоритеты. Сейчас самый заметный элемент всего дизайна — бутылка-логотип Apple радужных цветов. Даже если оставить в стороне вопрос уместности и эффективности такой “стилизации” в дворовой рекламе уборки мусора в России, то остается вопрос важности. Из всех элементов логотип — наименее значимый (если вы, конечно, не продаете те самые айфоны или мерседесы, но даже там могут быть нюансы).&lt;/p&gt;

&lt;p&gt;Какая же информация тут самая важная? Наверняка это могут знать только в самой компании, но попробуем предположить (да иногда мысли читать все же можно, если это просто упражнение). Думаю, компании хочется, чтобы люди захотели убирать мусор раздельно, связались с ними и попросили установить контейнер.&lt;/p&gt;

&lt;p&gt;Теперь посмотрим, с помощью чего авторы пытаются добиться этих целей. У нас есть немало информации. Давайте разбираться:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;2017 — год экологии в России. И сразу первая проблема: фото снято в 2018. Эта информация могла добавить что-то только в одном году, теперь же она играет против посыла. Убирать мусор больше не нужно?&lt;/li&gt;
  &lt;li&gt;Это контейнер только для пластика. Вот это основная мысль.&lt;/li&gt;
  &lt;li&gt;Логотип.&lt;/li&gt;
  &lt;li&gt;Что нужно кидать, что не нужно, стилизовано под объявление о розыске. Хорошая идея.&lt;/li&gt;
  &lt;li&gt;Иллюстрация на эту же тему. Картинка всегда сильнее текста, надо сделать эту часть основой, которая будет привлекать внимание.&lt;/li&gt;
  &lt;li&gt;Иллюстрация того, что не надо бросать. Тоже важная.&lt;/li&gt;
  &lt;li&gt;Статистика по странам. Тут есть вопрос, для чего это? Порицание мол мы плохие (на самом деле читается, как “вы”) — не лучший ход. Если же это призыв к действию, то не хватает главного — пользы.&lt;/li&gt;
  &lt;li&gt;Вопрос, призыв, благодарности. Вопрос риторический, даже с призывом (напоминает известное ВСЕ РАВНО?). Почему нам должно быть не всё равно? — вот что важно.&lt;/li&gt;
  &lt;li&gt;Контакты. Еще одна важная часть рекламы.&lt;/li&gt;
  &lt;li&gt;Название компании и лого инстаграма. Меня в инстаграме нет, а он у них закрыт, но даже из профиля я узнал чуть ли не самую важную информацию, который здесь нет: установка производится бесплатно (тут стоит сказать, что я не знаю, кто это и что это и никакой ответственности не несу, если что).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Мой вариант — сосредоточиться над образом розыска пластика, стилизовать все под постер криминальной комедии. Оставить только важную информацию. Рассказать о пользе. Поработать с приоритетами. Сбавить тон: меньше истерики, больше юмора. При этом оставим выделение цветом и слоганы. Как-то так:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/kAgQm1DtJXpWTXcyHRg4-g.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Это только набросок. Тут еще можно много чего улучшить. Сам текст, шрифт, расстояния, ширина блоков с текстом, черные блоки внизу было лень перекрашивать (они должны быть без черного фона), детали. При желании можно вписать статистику в стену с ростом на фоне. А вот для травы уже места не нашлось. Рамка, чтобы тут на белом фоне были видны границы. Думаю, что шанс того, что кто-то остановиться, дочитает до конца, задумается и позвонит, возрастет.&lt;/p&gt;</content><author><name></name></author><category term="дизайн" /><category term="разбор" /><category term="реклама" /><summary type="html">Сегодня у нас разбор рекламы установки контейнеров для раздельного сбора мусора во дворах. Выглядит она вот так:</summary></entry><entry><title type="html">Фотошоп-трюки: хроматическая аберрация и маска границ</title><link href="https://vallek.github.io/webval-blog/2018/06/01/chrom-abber-ph-mask.html" rel="alternate" type="text/html" title="Фотошоп-трюки: хроматическая аберрация и маска границ" /><published>2018-06-01T00:00:00+03:00</published><updated>2018-06-01T00:00:00+03:00</updated><id>https://vallek.github.io/webval-blog/2018/06/01/chrom-abber-ph-mask</id><content type="html" xml:base="https://vallek.github.io/webval-blog/2018/06/01/chrom-abber-ph-mask.html">&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/ZUtvQ4jAZtX8dGB1gbtBWQ.jpeg&quot; alt=&quot;фото голубя с ХА&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Сегодня расскажу вам, как бороться с хроматической аберрацией в фотошопе. На самом деле, саму аберрацию побороть довольно просто, а вот последствия этой борьбы уже нет.&lt;/p&gt;

&lt;p&gt;Каждый второй урок в выдаче по запросу “фотошоп хроматическая аберрация” расскажет вам вполне действенный метод. ХА — это цветные ореолы вокруг объектов на фото. Они всегда появляются на контрастных границах (граница светлого и темного) и довольно узкие. Значит, их можно убрать, наложив размытую копию слоя в режиме “Color”. Слой нужно размыть до состояния, когда цвет ХА пропадает, например, с помощью Filter&amp;gt;Blur&amp;gt;Gaussian blur. Количество пикселей зависит от размера фото, начинайте с 0 и поднимайте. Накладываем его в режиме “Цвет”, получаем перенос нового цвета на место ореолов, и они исчезают (как я понимаю, ХА — это только цветовой контраст, а не яркостный).&lt;/p&gt;

&lt;p&gt;Проблема в том, что этот метод негативно влияет на насыщенность всего фото. Это может быть незаметно на изображении близком к ч/б, но на насыщенном фото цвета потускнеют. И вот тут все как один уроки советуют “просто” взять и замазать ненужное по маске.&lt;/p&gt;

&lt;p&gt;Это может быть выходом, если ХА у вас на небольшом участке или фото всего одно. Но, что если оно по всей фотографии или таких фото много? В любом случае вырисовывать маску не наш метод! Тут-то нам пригодится метод создания маски границ. Суть такова: так как ореолы всегда появляются на границах, то нам нужно создать маску, на которой границы были бы белыми, а все остальное (участки, на которых нужно сохранить цвет)— черным.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/r5Y8NxJqMXmpg6IlQDEhVA.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Есть несколько способов создать такое изображение в фотошопе.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Фильтр Filter&amp;gt;Stylize&amp;gt;Find Edges&lt;/li&gt;
  &lt;li&gt;Фильтр Glowing Edges внутри Filter&amp;gt;Filter Gallery&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/4LJexPR-RsPJtTdsZE-Skw.jpeg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/webval-blog/Images/O_WZxYAoHUTfU2N9egz7hg.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;У второго варианта больше настроек, так есть смысл использовать его. Внутри Галереи фильтров вы можете переключаться на оригинал, нажимая на глазик в списке фильтров. Подберите такие значения, чтобы белые линии совпали с ХА ореолами.&lt;/p&gt;

&lt;p&gt;Вряд ли ваша маска будет идеальной, ведь фотошоп может найти кучу границ, на которых нет ХА. Можно убрать мелкие детали с помощью кривых/уровней (Ctrl+M, Ctrl+L). Для этого нужно поднять контраст (чтобы темное стало темнее, светлое светлее). А вот оставшиеся недочеты можно уже исправить кистью. Учтите, что изменять саму маску можно только деструктивно (или делать все коррекции на слое до копирования его в маску).&lt;/p&gt;

&lt;p&gt;Чтобы использовать слой как маску выделите весь холст (Ctrl+A), скопируйте изображение (Ctrl+C), войдите в редактирование маски (Alt+клик на маску) и вставьте туда изображение (Ctrl+V). Готово!&lt;/p&gt;

&lt;p&gt;PS: Перед применением фильтра можно сделать из слоя смарт объект (ПКМ&amp;gt;Convert to smart object), чтобы можно было изменить настройки фильтра. Ну и сделать экшен, чтобы не повторять все каждый раз. При создании экшена не забудьте включить выбор настроек фильтров (квадратики напротив действия).&lt;/p&gt;

&lt;p&gt;Начинаем с копирования слоя и размытия:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/Sk9NAzMeGPxP9S07MODq9g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Выбираем нужный режим наложения:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/3neR6U1dP_wX1rt-5vjbiw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Настройка фильтра:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/EKhNPHqUtKBJxH9ELrQUrQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Слои будут выглядеть примерно так. Слой из которого делается маска сверху невидимый.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/L8owNThvmuIQXWgiFFRSeg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Экшен&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/YJw23ctpaaC38JiDAeEj3w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Результат&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/webval-blog/Images/chromfin.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="photoshop" /><category term="tricks" /><summary type="html"></summary></entry></feed>